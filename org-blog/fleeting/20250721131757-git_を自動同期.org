:PROPERTIES:
:ID:       948E9308-00DE-4D92-A23B-ABE075B61BE9
:END:
#+TITLE: git を自動同期
#+begin_src shell
#!/bin/bash
# =============================================
# Git Auto Sync - 継続実行版
# =============================================

# 設定
REPOS=(
    "$HOME/.emacs.d"
    "$HOME/blog"
)

SYNC_INTERVAL=300  # 5分 = 300秒

# =============================================
# 関数
# =============================================

log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

setup_ssh() {
    if [ -z "$SSH_AUTH_SOCK" ]; then
        eval "$(ssh-agent -s)" >/dev/null
    fi
    
    if ! ssh-add -l 2>/dev/null | grep -q "id_ed25519"; then
        log "🔑 Adding SSH key..."
        if command -v expect >/dev/null 2>&1; then
            expect -c 'spawn ssh-add ~/.ssh/id_ed25519; expect "Enter passphrase" { send "Rikuto13\r" }; expect eof' >/dev/null 2>&1
        else
            ssh-add ~/.ssh/id_ed25519 2>/dev/null
        fi
    fi
}

sync_repo() {
    local repo="$1"
    local repo_name=$(basename "$repo")
    
    if [ ! -d "$repo" ]; then
        log "⚠️  $repo_name (not found)"
        return 1
    fi
    
    cd "$repo" || return 1
    
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log "⚠️  $repo_name (not git repo)"
        return 1
    fi
    
    # Git設定
    git config --local user.name "rikuto1367@gmail.com" 2>/dev/null
    git config --local user.email "Rikuto13ten" 2>/dev/null
    
    # HTTPS→SSH変換
    remote_url=$(git remote get-url origin 2>/dev/null)
    if [[ "$remote_url" == https://github.com/* ]]; then
        ssh_url=$(echo "$remote_url" | sed 's#https://github.com/#git@github.com:#')
        git remote set-url origin "$ssh_url"
        log "🔗 $repo_name: Converted to SSH"
    fi
    
    # Stash
    stashed=0
    if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
        git stash push -m "auto-$(date '+%H%M%S')" >/dev/null 2>&1
        stashed=1
    fi
    
    # Pull
    git fetch origin >/dev/null 2>&1
    current_branch=""
    
    if git pull --rebase origin main >/dev/null 2>&1; then
        current_branch="main"
    elif git pull --rebase origin master >/dev/null 2>&1; then
        current_branch="master"
    else
        log "❌ $repo_name: Pull failed"
        [ "$stashed" = "1" ] && git stash pop >/dev/null 2>&1
        return 1
    fi
    
    # Restore stash
    if [ "$stashed" = "1" ]; then
        git stash pop >/dev/null 2>&1
    fi
    
    # Push if changes
    if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
        git add . >/dev/null 2>&1
        git commit -m "Auto-sync $(date '+%Y-%m-%d %H:%M:%S')" >/dev/null 2>&1
        
        if git push origin "$current_branch" >/dev/null 2>&1; then
            log "📤 $repo_name: Changes pushed"
        else
            log "❌ $repo_name: Push failed"
            return 1
        fi
    else
        log "✅ $repo_name: Up to date"
    fi
    
    return 0
}

sync_all() {
    log "🔄 Starting sync..."
    local success=0
    local total=${#REPOS[@]}
    
    for repo in "${REPOS[@]}"; do
        if sync_repo "$repo"; then
            ((success++))
        fi
    done
    
    log "📊 Sync completed: $success/$total repositories"
}

# =============================================
# メイン処理
# =============================================

main() {
    log "🚀 Git Auto Sync started (interval: ${SYNC_INTERVAL}s)"
    log "📁 Repositories: ${#REPOS[@]}"
    
    # 初期SSH設定
    setup_ssh
    
    # 初回実行
    sync_all
    
    # 継続実行
    while true; do
        log "⏰ Next sync in ${SYNC_INTERVAL}s... (Press Ctrl+C to stop)"
        sleep "$SYNC_INTERVAL"
        
        # SSH再確認
        if ! ssh-add -l >/dev/null 2>&1; then
            log "🔑 Re-adding SSH key..."
            setup_ssh
        fi
        
        sync_all
    done
}

# 終了処理
cleanup() {
    log "🛑 Stopping Git Auto Sync..."
    exit 0
}

trap cleanup SIGINT SIGTERM

# 引数処理
case "${1:-}" in
    -h|--help)
        echo "Usage: $0 [--once] [--interval SECONDS]"
        echo "  --once              Run sync once and exit"
        echo "  --interval SECONDS  Set sync interval (default: 300)"
        echo "  --help              Show this help"
        exit 0
        ;;
    --once)
        log "🚀 Running single sync..."
        setup_ssh
        sync_all
        log "✅ Single sync completed"
        exit 0
        ;;
    --interval)
        if [[ "$2" =~ ^[0-9]+$ ]] && [ "$2" -gt 0 ]; then
            SYNC_INTERVAL="$2"
            log "⏱️  Interval set to ${SYNC_INTERVAL}s"
        else
            echo "Error: Invalid interval. Must be positive integer."
            exit 1
        fi
        ;;
esac

# メイン実行
main
#+end_src
